package task8;

import java.util.*;

//üí°- –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "User", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
//
//private String name;
//
//private Integer age;
//
//üí°- –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å –≥–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—â–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
//
//üí°- –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å –º–µ—Ç–æ–¥: public String toString(), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "–í–∞—Å—è, –≤–æ–∑—Ä–∞—Å—Ç 25 –ª–µ—Ç",
// –≥–¥–µ "–í–∞—Å—è" - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π name, –∞ 25 - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π age.
//
//üí°- –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –∏–º–∏ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//
//–≤ –º–µ—Ç–æ–¥–µ main –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:
//
//üí°- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∞–ø—É HashMap<Integer, List<User>>(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ —Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç,
// –∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;
//
//üí°- –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ 5-—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏
// –≤–≤–æ–¥–µ, –≤ HashMap. –ü—Ä–∏—á–µ–º, –µ—Å–ª–∏ –∫–ª—é—á (–≤–æ–∑—Ä–∞—Å—Ç) –≤ –º–∞–ø–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ
// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –ª–µ–∂–∞—â–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ –∫–ª—é—á—É. –ï—Å–ª–∏ –∫–ª—é—á –≤ –º–∞–ø–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å
// –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—É–¥–∞ —é–∑–µ—Ä–∞ –∏ –∫–ª–∞—Å—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤ –º–∞–ø—É –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É.
//
//üí°- –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –µ—Å—Ç—å –≤ –º–∞–ø–µ, –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å
// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ –∫–ª—é—á—É –∏–∑ –º–∞–ø—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏.

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String name;
        int age; // why not to be primitive?

        HashMap<Integer, List<User>> userAgeMap = new HashMap<Integer, List<User>>(5);

        for (int i = 1; i <= 5; i++) {
            System.out.printf("Enter %d class name:\n> ", i);
            name = in.nextLine();
            System.out.printf("Enter %d class age:\n> ", i);
            age = in.nextInt();
            in.nextLine(); // remove \n after age

            if (!userAgeMap.containsKey(age)) {
                userAgeMap.put(age, new ArrayList<User>());
            }
            userAgeMap.get(age).add(new User(name, age));
        }

        System.out.print("Enter age to find:\n> ");
        age = in.nextInt();

        if (userAgeMap.containsKey(age)) {
            for (User usr : userAgeMap.get(age)) {
                System.out.println(usr);
            }
        } else {
            System.out.println("No users with this age");
        }

        //OUTPUT:
        //User Dmitry, age: 25
        //User Alexander, age: 25
        //User Sasha, age: 25
    }
}

class User {
    private String name;
    private Integer age;

    User() {
        this.name = "N/A";
        this.age = 0;
    }

    User(String name, Integer age) {
        this.name = name;
        this.age = age;
    }

    public void SetName(String name) {
        this.name = name;
    }

    public String GetName() {
        return this.name;
    }

    public void SetAge(Integer age) {
        this.age = age;
    }

    public Integer GetAge() {
        return this.age;
    }

    public String toString() {
        return "User " + this.name + ", age: " + this.age;
    }
}